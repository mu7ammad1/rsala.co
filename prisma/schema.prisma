// prisma/schema.prisma
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String                 @id @default(cuid()) @map("_id")
  name                  String                 @default(cuid())
  username              String                 @unique @default(cuid()) @db.String
  bio                   String                 @default("hello bio")
  email                 String                 @unique
  emailVerified         DateTime               @default(now())
  image                 String                 @default("https://lh3.googleusercontent.com/pw/ABLVV87_rW0vm7TUWM8tKBU2mM-bTZjljfRPNkrC-UH93PmAObq8zK5McFfztvSeNySiKugH-l7eFxu0rBoezhi222RKIAZhNfFS-kj2vXuPfumtA2HyT6Z8VY_ieEf644VJqvApsSYiuYzCtBPiSR7SOt4oTw=w736-h552-s-no-gm?authuser=0")
  password              String?
  role                  UserRole               @default(USER)
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  accounts              Account[]
  sentMessages          Message[]              @relation("SentMessages")
  receivedMessages      Message[]              @relation("ReceivedMessages")
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isPublic  Boolean  @default(false)

  sender   User   @relation("SentMessages", fields: [senderId], references: [id])
  senderId String

  receiver   User   @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId String
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid()) @map("_id")
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid()) @map("_id")
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid()) @map("_id")
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid()) @map("_id")

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}
