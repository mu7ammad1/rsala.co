// prisma/schema.prisma
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String                 @id @default(cuid()) @map("_id")
  name                  String                 @default(cuid())
  username              String?                @unique @default(cuid()) @db.String
  bio                   String                 @default("hello bio")
  email                 String                 @unique
  emailVerified         DateTime?              @default(now()) // تحديد القيمة الافتراضية لحقل emailVerified
  image                 String?                @default("https://cdn.pixabay.com/photo/2023/11/07/15/31/red-panda-8372704_1280.jpg")
  password              String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  role                  UserRole               @default(USER)
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  accounts              Account[]
  sentMessages          Message[]              @relation("SentMessages")
  receivedMessages      Message[]              @relation("ReceivedMessages")
  usernameMessages      Message[]              @relation("UsernameMessages")
  comments              Comment[]              @relation("UserComments")
  followers             Follow[]               @relation("FollowerRelation")
  following             Follow[]               @relation("FollowingRelation")

}

model Follow {
  id          String @id @default(cuid()) @map("_id")
  follower    User   @relation("FollowerRelation", fields: [followerId], references: [id])
  followerId  String
  following   User   @relation("FollowingRelation", fields: [followingId], references: [id])
  followingId String

  @@unique([followerId, followingId])
}

model Message {
  id               String   @id @default(cuid()) @map("_id")
  content          String
  img1             String?
  img2             String?
  img3             String?
  img4             String?
  img5             String?
  img6             String?
  img7             String?
  img8             String?
  img9             String?
  img10            String?
  img11            String?
  img12            String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  isPublic         Boolean  @default(false)
  avatar           String?  @default("")
  senderUsername   User?    @relation("UsernameMessages", fields: [senderUsernameId], references: [username])
  senderUsernameId String   @db.String
  sender           User?    @relation("SentMessages", fields: [senderId], references: [id])
  senderId         String
  receiver         User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId       String

  comments Comment[] @relation("MessageComments")

}

model Comment {
  id        String   @id @default(cuid()) @map("_id")
  content   String
  img1      String?
  img2      String?
  img3      String?
  img4      String?
  img5      String?
  img6      String?
  createdAt DateTime @default(now())
  user      User?    @relation("UserComments", fields: [userId], references: [id])
  userId    String
  message   Message  @relation("MessageComments", fields: [messageId], references: [id])
  messageId String

}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid()) @map("_id")
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid()) @map("_id")
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid()) @map("_id")
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid()) @map("_id")

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}
